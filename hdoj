Number Sequence  ------------------------hdoj  1711
Time Limit: 10000/5000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 57190    Accepted Submission(s): 22846


Problem Description
Given two sequences of numbers : a[1], a[2], ...... , a[N], and b[1], b[2], ...... , b[M] (1 <= M <= 10000, 1 <= N <= 1000000). Your task is to find a number K which make a[K] = b[1], a[K + 1] = b[2], ...... , a[K + M - 1] = b[M]. If there are more than one K exist, output the smallest one.
 

Input
The first line of input is a number T which indicate the number of cases. Each case contains three lines. The first line is two numbers N and M (1 <= M <= 10000, 1 <= N <= 1000000). The second line contains N integers which indicate a[1], a[2], ...... , a[N]. The third line contains M integers which indicate b[1], b[2], ...... , b[M]. All integers are in the range of [-1000000, 1000000].
 

Output
For each test case, you should output one line which only contain K described above. If no such K exists, output -1 instead.
 

Sample Input
2
13 5
1 2 1 2 3 1 2 3 1 3 2 1 2
1 2 3 1 3
13 5
1 2 1 2 3 1 2 3 1 3 2 1 2
1 2 3 2 1
 

Sample Output
6
-1

#include<cstdio>
#include<iostream>
#include<string>
using namespace std;
const int maxn = 1000000;
const int maxm=10000;
int text[maxn];
int pattern[maxm]; 
int nextTable[maxn];

void getNextTable(int m){
	
	int j=0;
	nextTable[j] = -1;
	int t = nextTable[j];
	while(j <m){
		if(t == -1 || pattern[t] == pattern[j]){
			++t;++j;
			nextTable[j] = t;
		}else{
			t = nextTable[t];
		}
	}
	return ;
} 
int KMP(int n,int m){
	getNextTable(m);
	
	int i=0;//主串 
	int j=0;//匹配的串 
	while(i<n && j<m){
		if(j==-1 || text[i] == pattern[j]){
			++i;++j;
		}else{
			j=nextTable[j];
		}
	}
	if(j == m){
		return i-j+1;
	}else{
		return -1;
	}
}
int main(){
	int casenum;
	scanf("%d",&casenum);
	while(casenum--){
		int n,m;
		scanf("%d %d",&n,&m);
		for(int i=0;i<n;i++){
			scanf("%d",&text[i]);
		}
		for(int i=0;i<m;i++){
			scanf("%d",&pattern[i]);
		}
		int pos = KMP(n,m);
		printf("%d\n",pos);
	}
	
	return 0;
} 
