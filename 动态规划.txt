杭电oj 1003 动态规划
#include<stdio.h>
int main(){
	int begin=0,end;
	int m,n;
	int i,j,k,t;
	scanf("%d",&m);
	for(t=1;t<=m;t++){
		scanf("%d",&n);//读入n 个数字
		int sum=0;
		int max=-1001;
		int con=0;
		int temp=0;
		for(i=0;i<n;i++){
			scanf("%d",&k);
			sum +=k;
			if(sum>max){
				max = sum;begin = con;
				end  = begin +temp;
			}
			temp++;
			if(sum<0){
				sum = 0;
				con = con +temp;
				temp=0;
			}
		}
		if(t!=1) printf("\n"); 
		printf("Case %d:\n",t);
		printf("%d %d %d\n",max,begin+1,end+1);
	}
} 

/*#include<cstdio>  数组会 超时 
#include<algorithm>
#include<cmath> 
using namespace std; 
const int maxn=10010;
int s[maxn],dp[maxn];
int main(){
	int n,m,j=1;
	scanf("%d", &m );
	for(;j<=m ;j++){
	
		scanf("%d", &n);
		for(int i=0; i<n; i++){
			scanf("%d",&s[i]);
		}
		int t;
		for(t=0;t<n;t++){
			if(s[t]>0) dp[0] = s[t];break;
		}
		
		for(int i=t;i<n;i++){
			dp[i] = max(s[i],dp[i-1] + s[i]);
		}
		int k=0;
		for(int i=1;i<n;i++){
			if(dp[i] > dp[k]) k=i;
		}
	printf("Case %d:\n",j);	
	printf("%d %d %d\n",dp[k],t+1,k+1);
	}
	return 0;
} */
// 最长 不降 子序列 L I S  算法笔记 
#include<cstdio>
#include<algorithm>
using namespace std;
const int N = 100;
int A[N],dp[N];
int main(){
	int n;
	scanf("%d",&n);
	for(int i=1 ; i<=n ; i++){
		scanf("%d", &A[i]);
	}
	int ans = -1;
	for(int i=1;i<=n ; i++){
		dp[i] =1;
		for( int j=1;j<i;j++){
			if( A[i] >= A[j] && (dp[j] +1 > dp[i])){
				dp[i] = dp[j] +1;
			}
		}
		ans = max( ans, dp[i]);
	}
	printf("%d\n",ans);
	return 0;
} 
// 最长 公共 子序列 例如 sadstory 和 adminsorry 
#include<cstdio> 
#include<algorithm>
#include<cstring>
using namespace std;
const int N= 100;
char A[N],B[N];
int dp[N][N];
int main(){
	gets(A +1);
	gets(B+1);
	int lenA = strlen(A+1);
	int lenB =strlen(B+1);
	//边界
	for( int i=0;i<=lenA;i++){
		dp[i][0] = 0;
	} 
	for( int j=0;j<=lenB;j++){
		dp[0][j]=0;
	}
	//状态转移方程
	for(int i=1;i<= lenA;i++){
		for(int j=1;j<=lenB;j++){
			if(A[i] == A[i]){
				dp[i][j] = dp[i-1][j-1] +1;
			}else{
				dp[i][j] = max( dp[i-1][j],dp[i][j-1]);
			}
		}
	} 
	printf("%d\n",dp[lenA][lenB]);
	return 0;
} 
// 最长 回文子串
#include<cstdio>
#include<cstring>
const int maxn = 1010;
char S[maxn];
int dp[maxn][maxn];
int main(){
	gets(S);
	int len = strlen(S),ans =1;
	memset(dp,0,sizeof( dp));
	//边界
	for(int i=0;i<len;i++){
		dp[i][i] = 1;
		if( i<len -1){
			if(S[i] == S[i-1]){
				dp[i][i+1] = 1;
				ans =2;
			}
		}
	} 
	for(int L=3;L<=len;L++){
		for(int i=0;i + L  -1 < len ;i++){
			int j=i+L-1;
			if( S[i] == S[j] && dp[i+1][j-1] == 1){
				dp[i][j] = 1;
				ans =L;
			}
		}
	}
	printf("%d\n",ans);
	return 0;
} 
// 最长 回文子串
#include<cstdio>
#include<cstring>
const int maxn = 1010;
char S[maxn];
int dp[maxn][maxn];
int main(){
	gets(S);
	int len = strlen(S),ans =1;
	memset(dp,0,sizeof( dp));
	//边界
	for(int i=0;i<len;i++){
		dp[i][i] = 1;
		if( i<len -1){
			if(S[i] == S[i-1]){
				dp[i][i+1] = 1;
				ans =2;
			}
		}
	} 
	for(int L=3;L<=len;L++){
		for(int i=0;i + L  -1 < len ;i++){
			int j=i+L-1;
			if( S[i] == S[j] && dp[i+1][j-1] == 1){
				dp[i][j] = 1;
				ans =L;
			}
		}
	}
	printf("%d\n",ans);
	return 0;
} 
01 背包
//
#include<cstdio>
using namespace std;
int N ,a ,dp,ans;
int main(){
	int i;
	scanf("%d",&N);
	for(i=1;i<=N;i++){
		scanf("%d",&a);
		dp= max(a,a+dp);
		ans = max(ans,dp)l
	}
	printf("%d\n",ans);
	return 0;	
} 

//   01背包 
/*
#include<cstdio>
using namespace std;
int N,V,dp[1001] ,c[100001],w[100001]; 
int main(){
	int i,j;
	scanf("%d %d",&N,&V);
	for(i=1;i<=N;i++){
		scanf("%d %d",&c[i],&w[i]);
	}
	for(i=1;i<=N;i++){
		for(j=V;j>=0;j--){
			if(j<c[i]) break;
			dp[j] = max( dp[j], dp[j-c[i]]+w[i]);
		}
	}
	printf("%d\n",dp[V]);
	return 0;
}*/
//并查集 poj 1988
/* 
Sample Input

6
M 1 6
C 1
M 2 4
M 2 6
C 3
C 4
Sample Output

1
0
2
*/
#include <cstdio>
#define MAXN 30001
using namespace std;

int pre[MAXN], son[MAXN], vis[MAXN];

int find(int x){
    if(pre[x]==x){
        return x;
    }
    int temp=pre[x];  //***递归思想，temp为存储x改变根节点后的根节点的临时变量
    pre[x]=find(pre[x]);
    vis[x]+=vis[temp];  //***x到改变前根节点的距离即x到temp的距离加上temp到根节点的距离
    return pre[x];
}

void jion(int x, int y){
    int px=find(x);
    int py=find(y);
    if(px!=py){
        pre[py]=px;
        vis[py]=son[px];  //***将x所在列放到y所在列上面后，find(y)到新合并后的根节点的距离即为合并前find(x)的子树的大小
        son[px]+=son[py];  //***合并后find(x)的子树大小即为合并前find(x)与find(y)的子树大小的和
    }
}

int main(void){
    int p;
    scanf("%d", &p);
    for(int i=1; i<=MAXN; i++){
        pre[i]=i;
        son[i]=1;
    }
    for(int i=1; i<=p; i++){
        char s[2];
        int x, y;
        scanf("%s", s);
        if(s[0]=='M'){
            scanf("%d%d", &x, &y);
            jion(x, y);
        }else{
            scanf("%d", &x);
            printf("%d\n", son[find(x)]-vis[x]-1);//***注意这里并不是输出son(x)，因为我们并没有求出每个节点的子树的大小
        }
    }
    return 0;
}