/*
线性数据结构 向量 栈 队列 
vector<int> vector; 类似于动态数组 (int*)molloc(sizeof(int)) 
int a[]={1,2,3,4}; 
队列 queue
栈 stack 

#include<cstdio>
#include<iostream>
#include<queue> 
using namespace std; 
struct Animal{
	int num;
	int order;
	Animal(){}
	Animal(int n,int o):num(n),order(o){}
}; 
queue<Animal> cats;
queue<Animal> dogs;
int main(){
	int n;
	scanf("%d",&n);
	int order=0;
	for(int i=0;i<n;i++){
		int method,type;
		scanf("%d %d",&method,&type);
		if(method == 1){
			if(type > 0){
				dogs.push(Animal(type,order++));
			}else{
				cats.push(Animal(type,order++));
			}
		}else{
			if(type == 0 && !dogs.empty() && !cats.empty()){
				if(dogs.front().order < cats.front().order){
					printf("%d ",dogs.front().num);
					dogs.pop();
				}else{
					printf("%d ",cats.front().num);
					cats.pop();
				}
			}else if(type == 0 && dogs.empty() && !cats.empty()){
				printf("%d ",cats.front().num);
				cats.pop();
			}else if(type == 0 && !dogs.empty() && cats.empty()){
				printf("%d ",dogs.front().num);
				dogs.pop();
			}else if(type == 1 && !dogs.empty()){
				printf("%d ",dogs.front().num);
				dogs.pop();
			}else if(type == -1 && !cats.empty()){
				printf("%d ",cats.front().num);
				cats.pop();
			}
		}
	} 
	printf("\n"); 
	return 0;
}


//括号匹配

#include<cstdio>
#include<iostream>
#include<string>
#include<stack>
using namespace std;
int main(){
	string str;
	while(cin >>str){
		stack<int> stacks;
		string ans(str.size(), ' ');
		for(int i=0; i<str.size(); i++){
			if(str[i] == '('){
				stacks.push(i);
			}else if(str[i] ==')'){
				if(!stacks.empty()){
					stacks.pop();
				}else{
					ans[i]='?';
				}
			}
		}
		while(!stacks.empty()){
			ans[stacks.top()]='$';
			stacks.pop();
		}
		cout << str <<endl;
		cout << ans <<endl;
	} 
	
	return 0;
} 

*/
// 表达式求值

#include<cstdio>
#include<iostream>
#include<cctype>
#include<string>
#include<stack>
using namespace std;
int Priority(char c){
	if(c =='#'){
		return 0;
	}else if( c=='$'){
		return 1;
	}else if(c=='+' || c=='-'){
		return 2;
	}else if(c =='*' || c=='/'){
		return 3;
	}
} 
double Getnum(string str,int& index){
	double num =0;
	while(isdigit(str[index])){
		num = num*10 +str[index]-'0';
		index++;
	}
	return num;
}
double Calculate(double x, double y,char op){
	double res = 0;
	if(op =='+'){
		res = x+y;
	}else if(op == '-'){
		res = x-y;
	}else if(op =='*'){
		res = x*y;
	}else if(op =='/'){
		res = x/y;
	}
	return res;
}
int main(){
	stack<char>oper;
	stack<double> data;
	string str;
	getline(cin, str);
	int index=0;
	oper.push('#');
	str +='$';
	while(index <str.size()){
		if(str[index] ==' '){
			index++;
		}else if(isdigit(str[index])){
			data.push(Getnum(str,index));
		}else{
			if(Priority(oper.top()) < Priority(str[index])){
				oper.push(str[index]);
				index++;
			}else{
				double y = data.top();
				data.pop();
				double x = data.top();
				data.pop();
				data.push(Calculate(x,y,oper.top()));
				oper.pop();
			} 
		}
	} 
	printf("%.2f\n",data.top());
	return 0;
}
